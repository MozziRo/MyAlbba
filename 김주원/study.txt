# API 문서 구성

## API 소개
단순히 API에 대한 기능 설명을 하는 것보다는 API의 개발 배경, 비즈니스 목적, 장점 등을 포함하여 외부 개발자가 API를 명확히 이해할 수 있도록 합니다.

## 공통 요청 / 응답 형식
일반적으로 한 서비스의 API는 통일된 방식으로 API를 호출합니다. 이때 API를 개발자가 어떤 방식으로 개발했느냐에 따라 문서의 구성이 달라질 수 있습니다. 예를 들어, API 요청 시 사용하는 데이터 형식을 'APP / JSON'으로 제한하는 개발자도 있을 수 있습니다. 응답 역시, 어떤 개발자는 성공/실패 여부를 `success` 필드에서 설명하는 반면, 다른 개발자는 상태코드를 통해 제공하는 경우도 있습니다. 이런 점들은 API 문서에 정확하게 반영되어야 합니다.

## 공통 에러
API 간 공통되는 에러 코드가 존재한다면, 문서의 한 섹션에 공통 에러 코드를 모아두고 관리하는 것이 효율적입니다. 엔터프라이즈에서 추천하는 방식은, 문서의 한 섹션(개요 문서)에 공통 에러를 제공하고, 각 API에 공통 에러 테이블을 링크로 연결하는 것입니다.

## 사전 작업
고객사에서 API 문서를 요청했을 때, swagger 등의 링크나 API 명세서만 제시하는 경우가 많습니다. 그러나 사용 순서를 문서화할 수 있는 공간에 제약이 있기 때문에 별도의 문서에 API의 사용 순서를 설명하는 시작 가이드를 제작하는 것이 바람직합니다.

## API 레퍼런스
API의 약속은 보통 요청 방식, 요청 파라미터 유형, 파라미터의 필수 여부 등을 의미합니다. API 별 요청과 응답을 정리해놓은 문서가 API 레퍼런스입니다. API 레퍼런스는 대개 요청(Request)과 응답(Response)으로 구성됩니다.

## 요청(Request)
API 요청에 관한 중요한 사항들을 다룹니다.

- 어떤 API 요청 방식을 가지고 있는지
- 요청이 실행되는 곳은 어디인지
- API 요청을 하기 위해 별도의 인증 방식이 있는지
- API 요청을 별도로 테스트할 수 있는지

### Request Syntax
Request Syntax는 API의 형태, 구조에 대한 정의입니다. API가 어떤 메서드를 사용하는지, 요청 URL의 형태는 무엇인지, 그리고 코드 예제가 함께 제공되어야 합니다.

### Request Header
Request Header는 요청에 대한 추가 정보를 담고 있는 부분입니다. 예를 들어 메시지의 총 길이, 형식 등을 포함합니다. 또한, 앞에서 발급받은 인증 정보를 Header에 작성하기도 합니다.


### Request Element
Request Element는 해당 요청의 실제 메시지나 내용입니다. API를 요청하기 위한 파라미터와 파라미터의 유형, 필수 여부와 설명, 제약 사항 등이 제공되어야 합니다. 드물게 GET 메서드처럼 Element의 요청이 없는 경우도 있을 수 있습니다.
